<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Population Lines on Claus Gaarde Pedersen</title>
    <link>/tags/population-lines/index.xml</link>
    <description>Recent content in Population Lines on Claus Gaarde Pedersen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Claus Gaarde Pedersen</copyright>
    <atom:link href="/tags/population-lines/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The mountains of Denmark</title>
      <link>/post/poplines/</link>
      <pubDate>Sat, 29 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/poplines/</guid>
      <description>&lt;div id=&#34;showing-population-density-as-population-lines&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Showing population density as population lines&lt;/h2&gt;
&lt;p&gt;There are no mountains in Denmark! In fact the highest point is a hill at 170 meters. We try to compensate for our diminutive stature by giving our hills impressive names like ‘The sky mountain’. But now with a little help from population data and abit of imagery we can create the impression that there is mountainious peaks in Denmark.&lt;/p&gt;
&lt;p&gt;The idea is not mine, but gleefully &lt;del&gt;copied&lt;/del&gt; inspired from &lt;a href=&#34;http://blog.revolutionanalytics.com/2017/04/where-europe-lives.html&#34; class=&#34;uri&#34;&gt;http://blog.revolutionanalytics.com/2017/04/where-europe-lives.html&lt;/a&gt; and &lt;a href=&#34;http://spatial.ly/2017/04/population-lines-how-and-why-i-created-it/&#34; class=&#34;uri&#34;&gt;http://spatial.ly/2017/04/population-lines-how-and-why-i-created-it/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is the code from the first blog. I have made some changes mostly just to create a function so its easier to experiment with.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# code copied from http://blog.revolutionanalytics.com/2017/04/where-europe-lives.html with my merciless tweaks

# data from http://ec.europa.eu/eurostat/web/gisco/geodata/reference-data/population-distribution-demography/geostat
# Originally seen at http://spatial.ly/2014/08/population-lines/

# So, this blew up on both Reddit and Twitter. Two bugs fixed (southern Spain was a mess,
# and some countries where missing -- measure twice, submit once, damnit), and two silly superflous lines removed after
# @hadleywickham pointed that out. Also, switched from geom_segment to geom_line.

# The result of the code below can be seen at http://imgur.com/ob8c8ph

pop &amp;lt;- read_csv(&amp;#39;poplines/GEOSTAT_grid_POP_1K_2011_V2_0_1.csv&amp;#39;) %&amp;gt;%
  rbind(read_csv(&amp;#39;poplines/JRC-GHSL_AIT-grid-POP_1K_2011.csv&amp;#39;) %&amp;gt;%
          mutate(TOT_P_CON_DT=&amp;#39;&amp;#39;)) %&amp;gt;%
  mutate(lat = as.numeric(gsub(&amp;#39;.*N([0-9]+)[EW].*&amp;#39;, &amp;#39;\\1&amp;#39;, GRD_ID))/100,
         lng = as.numeric(gsub(&amp;#39;.*[EW]([0-9]+)&amp;#39;, &amp;#39;\\1&amp;#39;, GRD_ID)) * ifelse(gsub(&amp;#39;.*([EW]).*&amp;#39;, &amp;#39;\\1&amp;#39;, GRD_ID) == &amp;#39;W&amp;#39;, -1, 1) / 100)

populate_lines &amp;lt;- function(popl=pop, country=NULL, xdetail=2, ydetail=2){
  if(is.null(country)) {
    popl &amp;lt;- popl
  } else {
    popl &amp;lt;- filter(popl, CNTR_CODE==country)
  }
  popl %&amp;gt;%
    filter(lng &amp;gt; 25, lng &amp;lt; 60) %&amp;gt;%
    group_by(lat=round(lat*ydetail, 1)/ydetail, lng=round(lng*xdetail, 1)/xdetail) %&amp;gt;%
    summarize(value = sum(TOT_P, na.rm=TRUE)) %&amp;gt;%
    ungroup() %&amp;gt;%
    complete(lat, lng)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the code to make a population plot of Denmark&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(populate_lines(country=&amp;quot;DK&amp;quot;, xdetail=4, ydetail=4),
       aes(lng, lat + 3*(value/max(value, na.rm=TRUE)))) +
  geom_line(size=0.4, alpha=0.8, color=&amp;#39;#5A3E37&amp;#39;, aes(group=lat), na.rm=TRUE) +
  ggthemes::theme_map() + coord_equal(0.9)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-05-09-poplines_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I dont like how the spikes draw over the lines ‘behind’ them. That brings us to the other site, which has a better solution. Its not as simple and the plot has to be generated iteratively.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# http://spatial.ly/2017/04/population-lines-how-and-why-i-created-it/

#create a range standardisation function
range01 &amp;lt;- function(x){(x-min(x, na.rm=TRUE))/(max(x, na.rm=TRUE)-min(x, na.rm=TRUE))}

# the plotting method used is quite iterative, so have to adjust expressions level
options(expressions=20000)

plot_poplines &amp;lt;- function(height=1.2, ratio=0.9, ...){
  popl &amp;lt;- populate_lines(...)
  values &amp;lt;- data_frame(pop=popl$value, x=popl$lng, y=popl$lat)
  
  # Rescale the values. This is to ensure that you can see the variation in the data
  values$pop&amp;lt;-range01(values$pop) * height
  
  # Order to draw northern most lines first
  values &amp;lt;- values[order(-values$y),]

    # Create an empty plot called p
  p &amp;lt;- ggplot()

  # This loops through each line of latitude and produced a filled polygon that will mask out the lines beneath
  # and then plots the paths on   top.The p object becomes a big ggplot2 plot.
  for (i in unique(values$y))
  {
    p &amp;lt;- p + geom_ribbon(data=values[values$y==i,], aes(x, ymin=y, ymax=y+pop, group=y), fill=&amp;quot;white&amp;quot;, color=&amp;quot;white&amp;quot;, size=0.2) +
      geom_line(data=values[values$y==i,], aes(x, pop+y), size=0.2, lineend=&amp;quot;round&amp;quot;)
  }
  
  # show plot!
  p + ggthemes::theme_map() + coord_equal(ratio)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I experimented abit to see if the code could be done differently, but didnt find a good solution. I made the change to use geom_ribbon instead of geom_polygon, which avoids some artifacts in the plot when the borders/coastlines are spikes, but the plot is still generated iteratively. I guess if ggplot allowed for 2 different colors in geom_ribbon one for top line-color and the other for bottem line-color it would solve most of the troubles.&lt;/p&gt;
&lt;p&gt;This code is also adjusted, mostly by creating a function.&lt;br /&gt;
This funcion is used to make a new plot of Denmark (also shown in the header of this post) :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Denmark
plot_poplines(country=&amp;quot;DK&amp;quot;, xdetail=6, ydetail=4, height=1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-05-09-poplines_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I think this is visually more pleasing, than the first plot.&lt;/p&gt;
&lt;p&gt;To make population plots on your own, you can use plot_poplines, with your favorite country and experiment with the parameters or you can adjust the code to make further enhancements. Also by running the code yourself you can see the plot in bigger size than the formatting of rmarkdown allows for.&lt;/p&gt;
&lt;p&gt;Lets make a plot of Europe&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Europe
plot_poplines(xdetail=1, ydetail=0.5, height=3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-05-09-poplines_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Plot of United Kingdom&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# United Kingdom
plot_poplines(country=&amp;quot;UK&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-05-09-poplines_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Plot of Germany&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Germany
plot_poplines(country=&amp;quot;DE&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-05-09-poplines_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Codes for the european countries are here DE, ES, CH, FR, IE, FI, MT, CZ, PL, LI, LT, UK, SE, BG, XK*, EL, AT, IT, BE, PT, SI, NO, LV, HR, SK, HU, NL, EE, RO, DK, AL, CY, LU, IM, MC, SM, AD, VA, BA, IS, ME, MK, RS&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
